"use strict";(self.webpackChunkretreon_website=self.webpackChunkretreon_website||[]).push([[77],{1676:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var s=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],o={title:"Testing Patterns"},c=void 0,u={unversionedId:"testing-patterns",id:"testing-patterns",isDocsHomePage:!1,title:"Testing Patterns",description:"Unit testing patterns are still in flux. This is all subject to change.",source:"@site/docs/testing-patterns.md",sourceDirName:".",slug:"/testing-patterns",permalink:"/testing-patterns",editUrl:"https://github.com/retreon/website/edit/main/docs/testing-patterns.md",tags:[],version:"current",frontMatter:{title:"Testing Patterns"},sidebar:"someSidebar",previous:{title:"Style Guide",permalink:"/style-guide"}},l=[],d={toc:l};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Unit testing patterns are still in flux. This is all subject to change."))),(0,r.kt)("p",null,"Retreon recommends testing your actions and reducers against a real redux store. Create a new store each test, run your actions, then assert on the new state."),(0,r.kt)("p",null,"This works particularly well when you ",(0,r.kt)("a",{parentName:"p",href:"/style-guide#separate-your-effects"},"separate effects from actions"),", and then you can mock the IO boundary and simulate different scenarios."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"jest.mock('../effects')\n\ntest('fetch user details', async () => {\n  effects.fetchUserDetails.mockResolvedValue({ user })\n\n  await store.dispatch(actions.fetchUserDetails(user.id))\n  expect(store.getState()).toMatchObject({\n    users: { [user.id]: user },\n  })\n})\n\ntest('fetch user details with error notice on request failure', async () => {\n  effects.fetchUserDetails.mockRejectedValue(new Error('Request failed.'))\n\n  await store.dispatch(actions.fetchUserDetails(user.id))\n  expect(store.getState()).toMatchObject({\n    loadingState: 'error',\n  })\n})\n")))}p.isMDXComponent=!0}}]);